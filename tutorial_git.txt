Базовые команды гита + последовательность их использования

Стартовый сетап для новго проекта (что делаем последовательно для новых проектов)
git init -> git config user.name "имя" -> git config user.email <почта>
git add -A или git add . -> git commit -m «message»

git help - открывает документацию гита в терминале
git help <ключевое слово> - показывает документацию по определенной команде
git init - инициализация проекта, создает скрытую папку для проекта. В процессе заполняем нужные поля
git config user.name "имя" - вносим данные автора / имя (имя в кавычках пишем)
git config user.email <почта> - вносим данные автора / почта (почту без кавычек)

git add <file.расширение> - добавляет файл для отслеживания
git add -A - добавляет для отслеживания сразу все файлы
git commit - создает контрольную точку (снимок)
git commit -m «message» - создает контрольную точку с сообщением внутри «message»
git commit --amend

git status - проверка текущего статуса. показывает индексацию и изменения в файлах
git log - показывает историю коммитов
git diff - показывает разницу между последним коммитом и текущими неотслеживаемыми! изменениями
git diff --stage - показывает разницу между последним коммитом и текущими отслеживаемыми! изменениями
git diff <ID> - показывает рразницу между коммитом с указаным ID и текущими изменениями

git reset <опиционально можно указать желаемый комит> - сбрасывает все изменения и возвращается к последнему комиту (или если указан коммит то к указаному) - ИСПОЛЬЗОВАТЬ ОСТОРОЖНО
git reset HEAD~<число> - удаляет <число> последних контрольных точек в выбранной на данный момент ветке
git reset HEAD^ - удаляет одну точку от текущего значения
git checkout <название ветки> - перемещает на последний коммит выбранной ветки
git checkout HEAD^ - возвращает предыдущую точку от текущего коммита
git checkout HEAD~<число> - возвращает на <число> точек назад
git checkout <ID> - переносит на выбраные (по ID) снимок
git checkout -- . - удаляет все неотслеживаемые изменения !ИСПОЛЬЗУЕМ ОСТОРОЖНО
git checkout -- <путь/название файла> - удаляет неотслеживаемые изменения в конкретном файле, отслеживаемые остаются
git checkout <branch name> - переключаемся на ветку с таким названием <branch name>

git remote add <rep.name> <rep.adress> - добавляет новый удаленный репозиторий с названием <rep.name> по адресу <rep.adress>
git push <rep.name> <branch> - отправляет изменения на удаленный репозиторий. Если ветка с таким название <branch> на удаленном есть, значит добавит изменения туда, если ветки с таким названием нету, создаст ее на удаленном репо. Для отправки обязательно должны быть созданы коммиты и ветка.
git pull <rep.name> <branch> - получаем изменения с репозитория <rep.name>, данные приходят с выбраной ветки на удаленном репозитории <branch>

git branch - указывает на какой ветке сейчас мы находимся + показывает список локальных веток
git branch -r - показывает все удаленные ветки
git branch <name of new branch> - создает новую ветку котора начнется с текущего комита
git brahch -d <name> - удаляет ветку с таким названием <name>, если ветка не сливалась будет сообщение с необходимость повторно ввести команду с флагом -D. Удалять ветку нужно переместивши указатель HEAD на любую другую ветку
git merge <branch name> - в текущую ветку (в которой сейчас находимся) добавляем код с ветки <branch name>. Это значит что сначала переходим в главную ветку, а потом применяем команду чтобы добавить тестовый код с ветки <branch name>

ПРАВИЛЬНЫЙ нейминг и записи сообщений для комитов
fix(): фиксы 
feat(): - фича 
refactor(): - рефактор 
improvements(): - улучшения, доработка

example: feat(IndexPage): added new page, fix(product-section): add correct font size to title